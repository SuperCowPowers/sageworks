{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SageWorks","text":"<p>SageWorks is a medium granularity framework that manages and aggregates AWS\u00ae Services into classes and concepts. When you use SageWorks you think about DataSources, FeatureSets, Models, and Endpoints. Underneath the hood those classes handle all the details around updating and managing a complex set of AWS Services. </p> <p>All the power and none of the pain so that your team can Do Science Faster!</p>"},{"location":"sageworks_classes/","title":"SageWorks API Classes","text":"<p>Welcome to the sageworks.api module.</p> <p>This module provides high-level APIs for the SageWorks package, offering easy access to its core classes: data_source, feature_set, model, and endpoint.</p>"},{"location":"sageworks_classes/#sageworks.api.DataSource","title":"<code>DataSource</code>","text":"<p>             Bases: <code>AthenaSource</code></p> <p>DataSource: SageWorks DataSource API Class</p> <p>Common Usage:</p> <pre><code>    my_data = DataSource(name_of_source)\n    my_data.summary()\n    my_data.details()\n    my_features = my_data.to_features()\n</code></pre> Source code in <code>src/sageworks/api/data_source.py</code> <pre><code>class DataSource(AthenaSource):\n    \"\"\"DataSource: SageWorks DataSource API Class\n\n    **Common Usage:**\n    ```\n        my_data = DataSource(name_of_source)\n        my_data.summary()\n        my_data.details()\n        my_features = my_data.to_features()\n    ```\n    \"\"\"\n\n    def __init__(self, source, name: str = None, tags: list = None):\n        \"\"\"\n        Initializes a new DataSource object.\n\n        Args:\n            source (str): The source of the data. This can be an S3 bucket, file path,\n                          DataFrame object, or an existing DataSource object.\n            name (str): The name of the data source. If not specified, an automatic name will be generated.\n            tags (list of str): A list of tags associated with the data source. If not specified automatic tags will be generated.\n        \"\"\"\n        self.log = logging.getLogger(\"sageworks\")\n\n        # Load the source (S3, File, or Existing DataSource)\n        ds_name = extract_data_source_basename(source) if name is None else name\n        if ds_name == \"dataframe\":\n            msg = \"Set the 'name' argument in the constructor: DataSource(df, name='my_data')\"\n            self.log.critical(msg)\n            raise ValueError(msg)\n        tags = [ds_name] if tags is None else tags\n        self._load_source(source, ds_name, tags)\n\n        # Call superclass init\n        super().__init__(ds_name)\n\n    def to_features(\n        self, name: str = None, tags: list = None, id_column: str = None, event_time_column: str = None\n    ) -&gt; FeatureSet:\n        \"\"\"\n        Convert the DataSource to a FeatureSet\n\n        Args:\n            name (str): Set the name for feature set. If not specified, an automatic name will be generated\n            tags (list): Set the tags for the feature set. If not specified automatic tags will be generated.\n            id_column (str): Set the id column for the feature set. If not specified one will be generated.\n            event_time_column (str): Set the event time column for the feature set. If not specified one will be generated.\n\n        Returns:\n            FeatureSet: The FeatureSet created from the DataSource\n        \"\"\"\n\n        # Create the FeatureSet Name and Tags\n        fs_name = self.uuid.replace(\"_data\", \"\") + \"_features\" if name is None else name\n        tags = [fs_name] if tags is None else tags\n\n        # Transform the DataSource to a FeatureSet\n        data_to_features = DataToFeaturesLight(self.uuid, fs_name)\n        data_to_features.set_output_tags(tags)\n        data_to_features.transform(id_column=id_column, event_time_column=event_time_column)\n\n        # Return the FeatureSet (which will now be up-to-date)\n        return FeatureSet(fs_name)\n\n    def _load_source(self, source: str, name: str, tags: list):\n        \"\"\"Load the source of the data\"\"\"\n        self.log.info(f\"Loading source: {source}...\")\n\n        # Pandas DataFrame Source\n        if isinstance(source, pd.DataFrame):\n            my_loader = PandasToData(name)\n            my_loader.set_input(source)\n            my_loader.set_output_tags(tags)\n            my_loader.transform()\n\n        # S3 Source\n        source = source if isinstance(source, str) else str(source)\n        if source.startswith(\"s3://\"):\n            my_loader = S3ToDataSourceLight(source, name)\n            my_loader.set_output_tags(tags)\n            my_loader.transform()\n\n        # File Source\n        elif os.path.isfile(source):\n            my_loader = CSVToDataSource(source, name)\n            my_loader.set_output_tags(tags)\n            my_loader.transform()\n</code></pre>"},{"location":"sageworks_classes/#sageworks.api.DataSource.__init__","title":"<code>__init__(source, name=None, tags=None)</code>","text":"<p>Initializes a new DataSource object.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The source of the data. This can be an S3 bucket, file path,           DataFrame object, or an existing DataSource object.</p> required <code>name</code> <code>str</code> <p>The name of the data source. If not specified, an automatic name will be generated.</p> <code>None</code> <code>tags</code> <code>list of str</code> <p>A list of tags associated with the data source. If not specified automatic tags will be generated.</p> <code>None</code> Source code in <code>src/sageworks/api/data_source.py</code> <pre><code>def __init__(self, source, name: str = None, tags: list = None):\n    \"\"\"\n    Initializes a new DataSource object.\n\n    Args:\n        source (str): The source of the data. This can be an S3 bucket, file path,\n                      DataFrame object, or an existing DataSource object.\n        name (str): The name of the data source. If not specified, an automatic name will be generated.\n        tags (list of str): A list of tags associated with the data source. If not specified automatic tags will be generated.\n    \"\"\"\n    self.log = logging.getLogger(\"sageworks\")\n\n    # Load the source (S3, File, or Existing DataSource)\n    ds_name = extract_data_source_basename(source) if name is None else name\n    if ds_name == \"dataframe\":\n        msg = \"Set the 'name' argument in the constructor: DataSource(df, name='my_data')\"\n        self.log.critical(msg)\n        raise ValueError(msg)\n    tags = [ds_name] if tags is None else tags\n    self._load_source(source, ds_name, tags)\n\n    # Call superclass init\n    super().__init__(ds_name)\n</code></pre>"},{"location":"sageworks_classes/#sageworks.api.DataSource.to_features","title":"<code>to_features(name=None, tags=None, id_column=None, event_time_column=None)</code>","text":"<p>Convert the DataSource to a FeatureSet</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Set the name for feature set. If not specified, an automatic name will be generated</p> <code>None</code> <code>tags</code> <code>list</code> <p>Set the tags for the feature set. If not specified automatic tags will be generated.</p> <code>None</code> <code>id_column</code> <code>str</code> <p>Set the id column for the feature set. If not specified one will be generated.</p> <code>None</code> <code>event_time_column</code> <code>str</code> <p>Set the event time column for the feature set. If not specified one will be generated.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>FeatureSet</code> <code>FeatureSet</code> <p>The FeatureSet created from the DataSource</p> Source code in <code>src/sageworks/api/data_source.py</code> <pre><code>def to_features(\n    self, name: str = None, tags: list = None, id_column: str = None, event_time_column: str = None\n) -&gt; FeatureSet:\n    \"\"\"\n    Convert the DataSource to a FeatureSet\n\n    Args:\n        name (str): Set the name for feature set. If not specified, an automatic name will be generated\n        tags (list): Set the tags for the feature set. If not specified automatic tags will be generated.\n        id_column (str): Set the id column for the feature set. If not specified one will be generated.\n        event_time_column (str): Set the event time column for the feature set. If not specified one will be generated.\n\n    Returns:\n        FeatureSet: The FeatureSet created from the DataSource\n    \"\"\"\n\n    # Create the FeatureSet Name and Tags\n    fs_name = self.uuid.replace(\"_data\", \"\") + \"_features\" if name is None else name\n    tags = [fs_name] if tags is None else tags\n\n    # Transform the DataSource to a FeatureSet\n    data_to_features = DataToFeaturesLight(self.uuid, fs_name)\n    data_to_features.set_output_tags(tags)\n    data_to_features.transform(id_column=id_column, event_time_column=event_time_column)\n\n    # Return the FeatureSet (which will now be up-to-date)\n    return FeatureSet(fs_name)\n</code></pre>"},{"location":"sageworks_classes/#sageworks.api.Endpoint","title":"<code>Endpoint</code>","text":"<p>             Bases: <code>EndpointCore</code></p> <p>Endpoint: SageWorks Endpoint API Class</p> Common Usage <p>my_features = Endpoint(name) my_features.summary() my_features.details() my_features.to_endpoint()</p> Source code in <code>src/sageworks/api/endpoint.py</code> <pre><code>class Endpoint(EndpointCore):\n    \"\"\"Endpoint: SageWorks Endpoint API Class\n\n    Common Usage:\n        my_features = Endpoint(name)\n        my_features.summary()\n        my_features.details()\n        my_features.to_endpoint()\n    \"\"\"\n\n    def __init__(self, name):\n        \"\"\"Endpoint Initialization\n        Args:\n            name (str): The name of the Endpoint\n        \"\"\"\n        # Call superclass init\n        super().__init__(name)\n</code></pre>"},{"location":"sageworks_classes/#sageworks.api.Endpoint.__init__","title":"<code>__init__(name)</code>","text":"<p>Endpoint Initialization Args:     name (str): The name of the Endpoint</p> Source code in <code>src/sageworks/api/endpoint.py</code> <pre><code>def __init__(self, name):\n    \"\"\"Endpoint Initialization\n    Args:\n        name (str): The name of the Endpoint\n    \"\"\"\n    # Call superclass init\n    super().__init__(name)\n</code></pre>"},{"location":"sageworks_classes/#sageworks.api.FeatureSet","title":"<code>FeatureSet</code>","text":"<p>             Bases: <code>FeatureSetCore</code></p> <p>FeatureSet: SageWorks FeatureSet API Class</p> <p>Common Usage     my_features = FeatureSet(name)     my_features.summary()     my_features.details()     my_features.to_model()</p> Source code in <code>src/sageworks/api/feature_set.py</code> <pre><code>class FeatureSet(FeatureSetCore):\n    \"\"\"FeatureSet: SageWorks FeatureSet API Class\n\n    Common Usage\n        my_features = FeatureSet(name)\n        my_features.summary()\n        my_features.details()\n        my_features.to_model()\n    \"\"\"\n\n    def __init__(self, name):\n        \"\"\"FeatureSet Initialization\n        Args:\n            name (str): The name of the FeatureSet\n        \"\"\"\n        # Call superclass init\n        super().__init__(name)\n\n    def to_model(\n        self,\n        model_type: ModelType,\n        target_column: str = None,\n        name: str = None,\n        tags: list = None,\n        description: str = None,\n    ):\n        \"\"\"Create a Model from the FeatureSet\n        Args:\n            model_type (ModelType): The type of model to create (See ModelType)\n            target_column (str): The target column for the model (optional)\n            name (str): Set the name for the model (optional)\n            tags (list): Set the tags for the model (optional)\n            description (str): Set the description for the model (optional)\n        Returns:\n            Model: The Model created from the FeatureSet\n        \"\"\"\n\n        # Create the Model Name and Tags\n        model_name = self.uuid.replace(\"_features\", \"\").replace(\"_\", \"-\") + \"-model\" if name is None else name\n        tags = [model_name] if tags is None else tags\n\n        # Transform the FeatureSet into a Model\n        features_to_model = FeaturesToModel(self.uuid, model_name, model_type=model_type)\n        features_to_model.set_output_tags(tags)\n        features_to_model.transform(target_column=target_column, description=description)\n\n        # Return the Model\n        return Model(model_name)\n</code></pre>"},{"location":"sageworks_classes/#sageworks.api.FeatureSet.__init__","title":"<code>__init__(name)</code>","text":"<p>FeatureSet Initialization Args:     name (str): The name of the FeatureSet</p> Source code in <code>src/sageworks/api/feature_set.py</code> <pre><code>def __init__(self, name):\n    \"\"\"FeatureSet Initialization\n    Args:\n        name (str): The name of the FeatureSet\n    \"\"\"\n    # Call superclass init\n    super().__init__(name)\n</code></pre>"},{"location":"sageworks_classes/#sageworks.api.FeatureSet.to_model","title":"<code>to_model(model_type, target_column=None, name=None, tags=None, description=None)</code>","text":"<p>Create a Model from the FeatureSet Args:     model_type (ModelType): The type of model to create (See ModelType)     target_column (str): The target column for the model (optional)     name (str): Set the name for the model (optional)     tags (list): Set the tags for the model (optional)     description (str): Set the description for the model (optional) Returns:     Model: The Model created from the FeatureSet</p> Source code in <code>src/sageworks/api/feature_set.py</code> <pre><code>def to_model(\n    self,\n    model_type: ModelType,\n    target_column: str = None,\n    name: str = None,\n    tags: list = None,\n    description: str = None,\n):\n    \"\"\"Create a Model from the FeatureSet\n    Args:\n        model_type (ModelType): The type of model to create (See ModelType)\n        target_column (str): The target column for the model (optional)\n        name (str): Set the name for the model (optional)\n        tags (list): Set the tags for the model (optional)\n        description (str): Set the description for the model (optional)\n    Returns:\n        Model: The Model created from the FeatureSet\n    \"\"\"\n\n    # Create the Model Name and Tags\n    model_name = self.uuid.replace(\"_features\", \"\").replace(\"_\", \"-\") + \"-model\" if name is None else name\n    tags = [model_name] if tags is None else tags\n\n    # Transform the FeatureSet into a Model\n    features_to_model = FeaturesToModel(self.uuid, model_name, model_type=model_type)\n    features_to_model.set_output_tags(tags)\n    features_to_model.transform(target_column=target_column, description=description)\n\n    # Return the Model\n    return Model(model_name)\n</code></pre>"},{"location":"sageworks_classes/#sageworks.api.Model","title":"<code>Model</code>","text":"<p>             Bases: <code>ModelCore</code></p> <p>Model: SageWorks Model API Class</p> Common Usage <p>my_features = Model(name) my_features.summary() my_features.details() my_features.to_model()</p> Source code in <code>src/sageworks/api/model.py</code> <pre><code>class Model(ModelCore):\n    \"\"\"Model: SageWorks Model API Class\n\n    Common Usage:\n        my_features = Model(name)\n        my_features.summary()\n        my_features.details()\n        my_features.to_model()\n    \"\"\"\n\n    def __init__(self, name):\n        \"\"\"Model Initialization\n        Args:\n            name (str): The name of the Model\n        \"\"\"\n        # Call superclass init\n        super().__init__(name)\n\n    def to_endpoint(self, name: str = None, tags: list = None, serverless: bool = True):\n        \"\"\"Create an Endpoint from the Model\n        Args:\n            name (str): Set the name for the endpoint (optional)\n            tags (list): Set the tags for the endpoint (optional)\n            serverless (bool): Set the endpoint to be serverless (optional)\n        Returns:\n            Endpoint: The Endpoint created from the Model\n        \"\"\"\n\n        # Create the Endpoint Name and Tags\n        endpoint_name = self.uuid.replace(\"-model\", \"\") + \"-end\" if name is None else name\n        tags = [endpoint_name] if tags is None else tags\n\n        # Create an Endpoint from the Model\n        model_to_endpoint = ModelToEndpoint(self.uuid, endpoint_name, serverless=serverless)\n        model_to_endpoint.set_output_tags(tags)\n        model_to_endpoint.transform()\n\n        # Return the Endpoint\n        return Endpoint(endpoint_name)\n</code></pre>"},{"location":"sageworks_classes/#sageworks.api.Model.__init__","title":"<code>__init__(name)</code>","text":"<p>Model Initialization Args:     name (str): The name of the Model</p> Source code in <code>src/sageworks/api/model.py</code> <pre><code>def __init__(self, name):\n    \"\"\"Model Initialization\n    Args:\n        name (str): The name of the Model\n    \"\"\"\n    # Call superclass init\n    super().__init__(name)\n</code></pre>"},{"location":"sageworks_classes/#sageworks.api.Model.to_endpoint","title":"<code>to_endpoint(name=None, tags=None, serverless=True)</code>","text":"<p>Create an Endpoint from the Model Args:     name (str): Set the name for the endpoint (optional)     tags (list): Set the tags for the endpoint (optional)     serverless (bool): Set the endpoint to be serverless (optional) Returns:     Endpoint: The Endpoint created from the Model</p> Source code in <code>src/sageworks/api/model.py</code> <pre><code>def to_endpoint(self, name: str = None, tags: list = None, serverless: bool = True):\n    \"\"\"Create an Endpoint from the Model\n    Args:\n        name (str): Set the name for the endpoint (optional)\n        tags (list): Set the tags for the endpoint (optional)\n        serverless (bool): Set the endpoint to be serverless (optional)\n    Returns:\n        Endpoint: The Endpoint created from the Model\n    \"\"\"\n\n    # Create the Endpoint Name and Tags\n    endpoint_name = self.uuid.replace(\"-model\", \"\") + \"-end\" if name is None else name\n    tags = [endpoint_name] if tags is None else tags\n\n    # Create an Endpoint from the Model\n    model_to_endpoint = ModelToEndpoint(self.uuid, endpoint_name, serverless=serverless)\n    model_to_endpoint.set_output_tags(tags)\n    model_to_endpoint.transform()\n\n    # Return the Endpoint\n    return Endpoint(endpoint_name)\n</code></pre>"},{"location":"admin/docker_push/","title":"Docker Build and Push","text":"<p>Notes and information on how to do the Docker Builds and Push to AWS ECR.</p> <p>The following instructions should work, but things change :)</p>"},{"location":"admin/docker_push/#update-sageworks-version","title":"Update SageWorks Version","text":"<pre><code>cd applications/aws_dashboard\nvi Dockerfile\n# Install Sageworks (changes often)\nRUN pip install --no-cache-dir sageworks==0.2.28 &lt;-- change this\n</code></pre>"},{"location":"admin/docker_push/#build-the-docker-image","title":"Build the Docker Image","text":"<pre><code>docker build -t sageworks_dashboard:v0_1_9_amd64 --platform linux/amd64 .\n</code></pre>"},{"location":"admin/docker_push/#test-the-image-locally","title":"Test the Image Locally","text":"<p>You have a <code>docker_local_dashboard</code> alias in your <code>~/.zshrc</code> :)</p>"},{"location":"admin/docker_push/#login-to-ecr","title":"Login to ECR","text":"<pre><code>aws ecr-public get-login-password --region us-east-1 --profile \\\nscp_sandbox_admin | docker login --username AWS \\\n--password-stdin public.ecr.aws\n</code></pre>"},{"location":"admin/docker_push/#tagpush-the-image-to-aws-ecr","title":"Tag/Push the Image to AWS ECR","text":"<pre><code>docker tag sageworks_dashboard:v0_2_28_amd64 \\\npublic.ecr.aws/m6i5k1r2/sageworks_dashboard:v0_2_28_amd64\n</code></pre> <pre><code>docker push public.ecr.aws/m6i5k1r2/sageworks_dashboard:v0_2_28_amd64\n</code></pre>"},{"location":"admin/docker_push/#update-the-latest-tag","title":"Update the 'latest' tag","text":"<pre><code>docker tag public.ecr.aws/m6i5k1r2/sageworks_dashboard:v0_2_28_amd64 \\\npublic.ecr.aws/m6i5k1r2/sageworks_dashboard:latest\n</code></pre> <pre><code>docker push public.ecr.aws/m6i5k1r2/sageworks_dashboard:latest\n</code></pre>"},{"location":"admin/docker_push/#test-the-ecr-image","title":"Test the ECR Image","text":"<p>You have a <code>docker_ecr_dashboard</code> alias in your <code>~/.zshrc</code> :)</p>"},{"location":"admin/pypi_release/","title":"PyPI Release Notes","text":"<p>Notes and information on how to do the PyPI release for the SageMaker project. For full details on packaging you can reference this page Packaging</p> <p>The following instructions should work, but things change :)</p>"},{"location":"admin/pypi_release/#package-requirements","title":"Package Requirements","text":"<ul> <li>pip install tox</li> <li>pip install --upgrade setuptools wheel</li> <li>pip install twine</li> </ul>"},{"location":"admin/pypi_release/#setup-pypirc","title":"Setup pypirc","text":"<p>The easiest thing to do is setup a \\~/.pypirc file with the following contents</p> <pre><code>[distutils]\nindex-servers =\n  pypi\n  testpypi\n\n[pypi]\nrepository=https://upload.pypi.org/legacy/\nusername=&lt;pypi username&gt;\npassword=&lt;pypi password&gt;\n\n[testpypi]\nrepository=https://test.pypi.org/legacy/\nusername=&lt;pypi username&gt;\npassword=&lt;pypi password&gt;\n</code></pre>"},{"location":"admin/pypi_release/#tox-background","title":"Tox Background","text":"<p>Tox will install the SageMaker Sandbox package into a blank virtualenv and then execute all the tests against the newly installed package. So if everything goes okay, you know the pypi package installed fine and the tests (which puls from the installed <code>sageworks</code> package) also ran okay.</p>"},{"location":"admin/pypi_release/#make-sure-all-tests-pass","title":"Make sure ALL tests pass","text":"<pre><code>$ cd sageworks\n$ tox \n</code></pre> <p>If ALL the test above pass...</p>"},{"location":"admin/pypi_release/#clean-any-previous-distribution-files","title":"Clean any previous distribution files","text":"<pre><code>make clean\n</code></pre>"},{"location":"admin/pypi_release/#tag-the-new-version","title":"Tag the New Version","text":"<pre><code>git tag v0.1.8 (or whatever)\ngit push --tags\n</code></pre>"},{"location":"admin/pypi_release/#create-the-test-pypi-release","title":"Create the TEST PyPI Release","text":"<pre><code>python setup.py sdist bdist_wheel\ntwine upload dist/* -r testpypi\n</code></pre>"},{"location":"admin/pypi_release/#install-the-test-pypi-release","title":"Install the TEST PyPI Release","text":"<pre><code>pip install --index-url https://test.pypi.org/simple sageworks\n</code></pre>"},{"location":"admin/pypi_release/#create-the-real-pypi-release","title":"Create the REAL PyPI Release","text":"<pre><code>twine upload dist/* -r pypi\n</code></pre>"},{"location":"admin/pypi_release/#push-any-possible-changes-to-github","title":"Push any possible changes to Github","text":"<pre><code>git push\n</code></pre>"},{"location":"misc/sageworks_classes_concepts/","title":"SageWorks Classes and Concepts","text":"<p>A flexible, rapid, and customizable AWS\u00ae ML Sandbox. Here's some of the classes and concepts we use in the SageWorks system:</p> <p></p> <ul> <li>Artifacts</li> <li>DataLoader</li> <li>DataSource</li> <li>FeatureSet</li> <li>Model</li> <li> <p>Endpoint</p> </li> <li> <p>Transforms</p> </li> <li>DataSource to DataSource<ul> <li>Heavy <ul> <li>AWS Glue Jobs</li> <li>AWS EMR Serverless</li> </ul> </li> <li>Light<ul> <li>Local/Laptop</li> <li>Lambdas</li> <li>StepFunctions</li> </ul> </li> </ul> </li> <li>DataSource to FeatureSet<ul> <li>Heavy/Light (see above breakout)</li> </ul> </li> <li>FeatureSet to FeatureSet<ul> <li>Heavy/Light (see above breakout)</li> </ul> </li> <li>FeatureSet to Model</li> <li>Model to Endpoint</li> </ul>"},{"location":"misc/scp_consulting/","title":"Scp consulting","text":""},{"location":"misc/scp_consulting/#consulting","title":"Consulting","text":""},{"location":"misc/scp_consulting/#sageworks-scp-consulting-awesome","title":"SageWorks + SCP Consulting = Awesome","text":"<p>Our experienced team can provide development and consulting services to help you effectively use Amazon\u2019s Machine Learning services within your organization.</p> <p>The popularity of cloud based Machine Learning services is booming. The problem many companies face is how that capability gets effectively used and harnessed to drive real business decisions and provide concrete value for their organization.</p> <p>Using SageWorks will minimizize the time and manpower needed to incorporate AWS ML into your organization. If your company would like to be a SageWorks Alpha Tester, contact us at sageworks@supercowpowers.com.</p>"},{"location":"misc/scp_consulting/#typical-engagements","title":"Typical Engagements","text":"<p>SageWorks clients typically want a tailored web_interface that helps to drive business decisions and provides value for their organization.</p> <ul> <li>SageWorks components provide a set of classes and transforms the will dramatically reduce time and increase productivity when building AWS ML Systems.</li> <li>SageWorks enables rapid prototyping via it's light paths and provides AWS production workflows on large scale data through it's heavy paths.</li> <li> <p>Rapid Prototyping is typically done via these steps.</p> </li> <li> <p>Quick Construction of Web Interface (tailored)</p> </li> <li>Custom Components (tailored)</li> <li>Demo/Review the Application with the Client</li> <li>Get Feedback/Changes/Improvements</li> <li> <p>Goto Step 1</p> </li> <li> <p>When the client is happy/excited about the ProtoType we then bolt down the system, test the heavy paths, review AWS access, security and ensure 'least privileged' roles and policies.</p> </li> </ul> <p>Contact us for a free initial consultation on how we can accelerate the use of AWS ML at your company sageworks@supercowpowers.com.</p>"}]}